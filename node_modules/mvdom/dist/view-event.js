"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_1 = require("./dom");
const event_1 = require("./event");
const view_1 = require("./view");
view_1.hook("didInit", function (view) {
    const opts = { ns: "view_" + view.id, ctx: view };
    if (view.events) {
        event_1.bindDOMEvents(view.el, view.events, opts);
    }
    if (view.docEvents) {
        event_1.bindDOMEvents(document, view.docEvents, opts);
    }
    if (view.winEvents) {
        event_1.bindDOMEvents(window, view.winEvents, opts);
    }
});
view_1.hook("willPostDisplay", function (view) {
    const opts = { ns: "view_" + view.id, ctx: view };
    if (view.closestEvents) {
        let allClosestBindings = collectClosestBinding(view.closestEvents);
        let elBySelector = {};
        allClosestBindings.forEach(function (binding) {
            let closestSelector = binding[0];
            let closestEl = elBySelector[closestSelector];
            if (closestEl === null) {
                return;
            }
            if (closestEl === undefined) {
                elBySelector[closestSelector] = closestEl = dom_1.closest(view.el, closestSelector);
            }
            if (closestEl) {
                event_1.bindDOMEvent(closestEl, binding[1], binding[2], opts);
            }
        });
    }
});
view_1.hook("willRemove", function (view) {
    const ns = { ns: "view_" + view.id };
    event_1.off(document, ns);
    event_1.off(window, ns);
    if (view.closestEvents) {
        let allClosestBindings = collectClosestBinding(view.closestEvents);
        let closestSelectorDone = {};
        allClosestBindings.forEach(function (binding) {
            let closestSelector = binding[0];
            if (closestSelectorDone[closestSelector]) {
                return;
            }
            closestSelectorDone[closestSelector] = true;
            let closestEl = dom_1.closest(view.el, closestSelector);
            if (closestEl) {
                event_1.off(closestEl, ns);
            }
        });
    }
});
function collectClosestBinding(bindings) {
    let bindingArray = (bindings instanceof Array) ? bindings : [bindings];
    let acc = [];
    bindingArray.forEach(function (item) {
        let key;
        for (key in item) {
            let val = item[key];
            if (typeof val == "function") {
                let fn = val;
                let firstIdx = key.indexOf(';');
                let closestSelector = key.substring(0, firstIdx);
                let bindingString = key.substring(firstIdx + 1);
                acc.push([closestSelector, bindingString, fn]);
            }
            else {
                let closestSelector = key;
                let subKey;
                for (subKey in val) {
                    let fn = val[subKey];
                    acc.push([closestSelector, subKey, fn]);
                }
            }
        }
    });
    return acc;
}
//# sourceMappingURL=view-event.js.map