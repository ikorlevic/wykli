declare type EventTargetOrMore = EventTarget | NodeList | [Node];
export interface SelectTarget {
    selectTarget: HTMLElement;
}
interface DetailEvent {
    detail?: any;
}
export declare type ExtendedEvent = Event & SelectTarget & DetailEvent & KeyboardEvent & MouseEvent & TouchEvent & object;
export declare type ExtendedDOMEventListener = (evt: ExtendedEvent) => void;
export declare type DOMListenerBySelector = {
    [selector: string]: ExtendedDOMEventListener;
};
export interface EventInfo {
    cancelable?: boolean;
    detail?: any;
}
export interface EventOptions {
    ctx?: object;
    ns?: string;
    capture?: boolean;
    passive?: boolean;
}
interface OffOptions {
    ns?: string;
}
export declare function on(els: EventTargetOrMore | null, types: string, listener: ExtendedDOMEventListener, opts?: EventOptions): void;
export declare function on(els: EventTargetOrMore | null, types: string, selector: string | null, listener: ExtendedDOMEventListener, opts?: EventOptions): void;
export declare function off(els: EventTargetOrMore | null): void;
export declare function off(els: EventTargetOrMore | null, type: string): void;
export declare function off(els: EventTargetOrMore | null, type: string, selector: string): void;
export declare function off(els: EventTargetOrMore | null, type: string, listener?: ExtendedDOMEventListener): void;
export declare function off(els: EventTargetOrMore | null, type: string, selector: string, listener?: ExtendedDOMEventListener): void;
export declare function off(els: EventTargetOrMore | null, opts?: OffOptions): void;
export declare function trigger(els: EventTargetOrMore | null | undefined, type: string, info?: EventInfo): void;
export declare function bindDOMEvents(el: EventTarget, eventDics: DOMListenerBySelector | DOMListenerBySelector[], opts: EventOptions): void;
export declare function bindDOMEvent(el: EventTarget, typeAndSelector: string, fn: ExtendedDOMEventListener, opts: EventOptions): void;
export {};
