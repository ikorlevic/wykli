import { DOMListenerBySelector } from './event';
import { HubBindings } from './hub';
import { Append } from './dom';
declare const hookStageNames: readonly ["willCreate", "didCreate", "willInit", "didInit", "willDisplay", "didDisplay", "willPostDisplay", "didPostDisplay", "willRemove", "didRemove"];
declare type HookStage = typeof hookStageNames[number];
export declare function hook(hookStage: HookStage, cb: (view: View) => void): void;
interface Config {
    append?: Append;
    data?: any;
}
export interface ViewController {
    create(config?: Config): string | HTMLElement | DocumentFragment;
    init?(config?: Config): any;
    postDisplay?(config?: Config): any;
    destroy?(data?: {
        parentEl?: HTMLElement;
    }): any;
    events?: DOMListenerBySelector | DOMListenerBySelector[];
    closestEvents?: DOMListenerBySelector | DOMListenerBySelector[];
    docEvents?: DOMListenerBySelector | DOMListenerBySelector[];
    winEvents?: DOMListenerBySelector | DOMListenerBySelector[];
    hubEvents?: HubBindings;
}
export interface View extends ViewController {
    id: number;
    name: string;
    el: HTMLElement;
}
export interface AnyView extends View {
    [name: string]: any;
}
export declare function display<V extends View>(this: any, viewInstance: ViewController & {
    [n: string]: any;
}, refEl: string | HTMLElement, config_or_append?: Config | Append): Promise<typeof viewInstance & View>;
export declare function empty(els: HTMLElement | DocumentFragment | HTMLElement[] | null | undefined): void;
export declare function remove(els: HTMLElement | DocumentFragment | HTMLElement[] | null | undefined): void;
export {};
